name: Billboard Sentinel CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: billboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/billboard_test" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "STORAGE_DIR=./test_uploads" >> $GITHUB_ENV
    
    - name: Run linting
      run: |
        pip install flake8 black
        flake8 backend/app --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend/app
    
    - name: Run unit tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short
    
    - name: Run API tests
      run: |
        cd backend
        python -m pytest tests/test_api.py -v
    
    - name: Test model inference
      run: |
        cd backend
        python -c "from app.detection import analyze_billboard_image; print('Model inference test passed')"

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: react_dashboard/package-lock.json
    
    - name: Install dependencies
      run: |
        cd react_dashboard
        npm ci
    
    - name: Run linting
      run: |
        cd react_dashboard
        npm run lint || echo "Linting completed with warnings"
    
    - name: Build frontend
      run: |
        cd react_dashboard
        npm run build
    
    - name: Test build artifacts
      run: |
        cd react_dashboard
        ls -la dist/ || ls -la build/
